@page "/register"
@layout LoginLayout
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@*@inject NotificationService NotificationService*@
<PageTitle>Register</PageTitle>
<div class="account-content">
    <div class="login-wrapper">
        <div class="login-content">
            <div class="login-userset">
                <EditForm Model="user" OnValidSubmit="HandleRegistration">
                    <DataAnnotationsValidator />
                <div class="login-logo logo-normal">
                    <img src="assets/img/logo.png" alt="img">
                </div>
                <a href="/login" class="login-logo logo-white">
                    <img src="assets/img/logo-white.png" alt="">
                </a>
               
                <div class="login-userheading">
                    <h3>Sign Up</h3>
                </div>
                
                <div class="form-login">
                    <label>Email</label>
                    <div class="form-addons">
                        <input type="text" @bind="user.Email" placeholder="Enter your email address">
                        <img src="assets/img/icons/mail.svg" alt="img">
                            <ValidationMessage For="@(() => user.Email)" />
                    </div>
                </div>
                    <div class="form-login">
                        <label>Full Name</label>
                        <div class="form-addons">
                            <input type="text" @bind="user.FullName" placeholder="Enter your full name">
                            <img src="assets/img/icons/mail.svg" alt="img">
                            <ValidationMessage For="@(() => user.FullName)" />
                        </div>
                    </div>
                <div class="form-login">
                    <label>Password</label>
                    <div class="pass-group">
                        <input type="password" @bind="user.Password" class="pass-input" placeholder="Enter your password">
                        <span class="fas toggle-password fa-eye-slash"></span>
                            <ValidationMessage For="@(() => user.Password)" />
                    </div>
                </div>
                    <div class="form-login">
                        <label>Confirm Password</label>
                        <div class="pass-group">
                            <input type="password" @bind="user.ConfirmPassword" class="pass-input" placeholder="Enter your password">
                            <span class="fas toggle-password fa-eye-slash"></span>
                            <ValidationMessage For="@(() => user.ConfirmPassword)" />
                        </div>
                    </div>
                <div class="form-login">
                    <button type="submit" class="btn btn-login">Sign Up</button>
                </div>
                    <div class="signinform text-center">
                        <h4>Already a user? <a href="login" class="hover-a">Sign In</a></h4>
                    </div>
                </EditForm>
            </div>
        </div>
        <div class="login-img">
            <img src="assets/img/login.jpg" alt="img">
        </div>
    </div>
</div>
@code {
    UserRegister user = new UserRegister();
    string message = string.Empty;
    string messageCssClass = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        user.Email = string.Empty;
        user.Address = string.Empty;
        user.Role = "Admin";
        user.Gender = "Male";
        user.Image = string.Empty;
        user.City = string.Empty;
        user.Phone = string.Empty;
        user.MobileNo = string.Empty;
        user.ShopName = string.Empty;
        user.IsActive = true;
        user.CreatedOn = DateTime.UtcNow;
    }
    async Task HandleRegistration()
    {
        var result = await AuthService.Register(user);
        message = result.Message;
        //ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "", Detail = message, Duration = 3000 });
        LoadData();
    }
    //void ShowNotification(NotificationMessage message)
    //{
    //    NotificationService.Notify(message);
    //}
}